{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useLayoutEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useTheme } from '@react-navigation/native';\nimport Tabs from \"../components/navigator/Tabs\";\nimport RecentMessagesList from \"../components/list/RecentMessagesList\";\nimport NewMessage from \"../components/buttons/NewMessage\";\nimport CreateRequestModal from \"../components/modal/CreateRequestModal\";\nimport SegmentedControl from \"../components/SegmentedControl\";\nimport { useGlobal } from 'reactn';\nimport { w } from \"../config/dimensions\";\nimport { tabBarStyle } from \"../components/navigator/BottomNavigator\";\nimport EditingDeleteButton from \"../components/buttons/EditingDeleteButton\";\nimport getLatestMessages from \"../functions/getLatestMessages\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar MessagesListScreen = function MessagesListScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEditing = _useState2[0],\n      setIsEditing = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      opacity = _useState4[0],\n      setOpacity = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var _useGlobal = useGlobal('contacts'),\n      _useGlobal2 = _slicedToArray(_useGlobal, 1),\n      contacts = _useGlobal2[0];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedItems = _useState8[0],\n      setSelectedItems = _useState8[1];\n\n  var _useState9 = useState(function () {\n    return getLatestMessages(contacts);\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      messages = _useState10[0],\n      setMessages = _useState10[1];\n\n  var theme = useTheme();\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerStyle: {\n        backgroundColor: \"#F4F4F4\",\n        shadowColor: 'transparent'\n      },\n      headerTitleStyle: {\n        fontWeight: 'bold'\n      },\n      headerTitle: function headerTitle() {\n        return _jsx(View, {\n          style: {\n            width: 34.7 * w,\n            alignSelf: \"center\",\n            marginLeft: Platform.OS === 'ios' ? 0 : 17 * w\n          },\n          children: _jsx(SegmentedControl, {})\n        });\n      },\n      headerLeft: function headerLeft() {\n        return messages.length > 0 ? _jsx(View, {\n          style: {\n            marginLeft: 2.1 * w\n          },\n          children: _jsx(Button, {\n            title: isEditing ? \"Cancel\" : \"Edit\",\n            onPress: function onPress() {\n              return setIsEditing(isEditing ? false : true);\n            }\n          })\n        }) : null;\n      },\n      headerRight: function headerRight() {\n        return isEditing ? _jsx(EditingDeleteButton, {\n          messages: messages,\n          selectedItems: selectedItems,\n          setSelectedItems: setSelectedItems,\n          setMessages: setMessages\n        }) : _jsx(NewMessage, {\n          messages: messages,\n          setMessages: setMessages\n        });\n      }\n    });\n  }, [navigation, isEditing, messages]);\n\n  var onScroll = function onScroll(opacity) {\n    navigation.setOptions({\n      tabBarStyle: _objectSpread(_objectSpread({}, tabBarStyle), {}, {\n        opacity: opacity\n      })\n    });\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(ScrollView, {\n      onScrollBeginDrag: function onScrollBeginDrag() {\n        return onScroll(0.3);\n      },\n      onScrollEndDrag: function onScrollEndDrag() {\n        return onScroll(0.95);\n      },\n      onMomentumScrollEnd: function onMomentumScrollEnd() {\n        return onScroll(0.95);\n      },\n      style: {\n        backgroundColor: \"#F4F4F4\",\n        height: \"100%\"\n      },\n      children: [_jsx(Tabs, {\n        navigation: navigation\n      }), _jsx(RecentMessagesList, {\n        isEditing: isEditing,\n        selectedItems: selectedItems,\n        setSelectedItems: setSelectedItems,\n        messages: messages,\n        setMessages: setMessages,\n        navigation: navigation\n      })]\n    }), _jsx(CreateRequestModal, {})]\n  });\n};\n\nexport default MessagesListScreen;","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/src/screens/RecentMessagesListScreen.tsx"],"names":["React","useLayoutEffect","useState","useTheme","Tabs","RecentMessagesList","NewMessage","CreateRequestModal","SegmentedControl","useGlobal","w","tabBarStyle","EditingDeleteButton","getLatestMessages","MessagesListScreen","navigation","isEditing","setIsEditing","opacity","setOpacity","value","setValue","contacts","selectedItems","setSelectedItems","messages","setMessages","theme","setOptions","headerStyle","backgroundColor","shadowColor","headerTitleStyle","fontWeight","headerTitle","width","alignSelf","marginLeft","Platform","OS","headerLeft","length","headerRight","onScroll","height"],"mappings":"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","sourcesContent":["import React, { useLayoutEffect, useState } from 'react';\nimport { View, Platform, Button, ScrollView } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\n\n// Components\nimport Tabs from '../components/navigator/Tabs';\nimport RecentMessagesList from '../components/list/RecentMessagesList';\nimport NewMessage from '../components/buttons/NewMessage';\nimport CreateRequestModal from '../components/modal/CreateRequestModal';\nimport SegmentedControl from '../components/SegmentedControl';\nimport { useGlobal } from 'reactn';\nimport {h, w} from \"../config/dimensions\";\nimport { tabBarStyle } from \"../components/navigator/BottomNavigator\";\n\n\n// Components\nimport EditingDeleteButton from '../components/buttons/EditingDeleteButton';\n\n// Functions\nimport getLatestMessages from '../functions/getLatestMessages';\n\n// Types\nimport Message from '../types/Message';\n\n\nconst MessagesListScreen = ({ navigation }:any) => {\n    const [ isEditing, setIsEditing ] = useState(false);\n    const [opacity, setOpacity] = useState(1);\n    const [ value, setValue ] = useState(\"\");\n    const [ contacts ] = useGlobal<any>('contacts');\n    const [ selectedItems, setSelectedItems ] = useState([]);\n    const [ messages, setMessages ] = useState<Message[]>(() => getLatestMessages(contacts)); \n    const theme:any = useTheme();\n    \n    // Allow edit button in header to change state\n    useLayoutEffect(() => {\n\n        navigation.setOptions({\n            headerStyle: {\n                backgroundColor: \"#F4F4F4\",\n                shadowColor: 'transparent'\n              },\n              headerTitleStyle: {\n                fontWeight: 'bold',\n              }, \n            \n            headerTitle: () => (\n            <View style={{ width: 34.7*w, alignSelf: \"center\", marginLeft: Platform.OS === 'ios' ? 0 : 17*w}}>\n              <SegmentedControl />\n              </View>),\n\n            headerLeft: () => ( // EDIT BUTTON\n                messages.length > 0 ? <View style={{ marginLeft: 2.1*w }}><Button title={isEditing ? \"Cancel\" : \"Edit\"} onPress={() => setIsEditing(isEditing ? false : true)}/></View> : null\n            ), // NEW MESSAGE BUTTON\n            headerRight: () => isEditing ? <EditingDeleteButton messages={messages} selectedItems={selectedItems} setSelectedItems={setSelectedItems} setMessages={setMessages} /> : <NewMessage messages={messages} setMessages={setMessages} />\n        });\n    }, [navigation, isEditing, messages]);\n\n\n    const onScroll = (opacity: number) => {\n        navigation.setOptions({\n            tabBarStyle: {\n                ...tabBarStyle,\n                opacity }\n    })}\n\n    \n\n    return (\n        <View>\n        <ScrollView \n        onScrollBeginDrag={() => onScroll(0.3)} \n        onScrollEndDrag={() => onScroll(0.95)} \n        onMomentumScrollEnd={() => onScroll(0.95)} \n        style={{ backgroundColor: \"#F4F4F4\", height: \"100%\" }}>\n        \n            <Tabs navigation={navigation}/>\n\n            <RecentMessagesList\n                isEditing={isEditing}\n                selectedItems={selectedItems}\n                setSelectedItems={setSelectedItems}\n                messages={messages}\n                setMessages={setMessages}\n                navigation={navigation}\n            />\n        </ScrollView>\n        <CreateRequestModal/>\n\n        </View>\n\n    )\n}\n\nexport default MessagesListScreen;\n"]},"metadata":{},"sourceType":"module"}