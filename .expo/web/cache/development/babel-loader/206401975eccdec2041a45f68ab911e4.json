{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nginx-iwnl/messages/src/components/list/RecentMessagesListItem.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DeleteButton from \"./recentMessages/DeleteButton\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { useTheme } from '@react-navigation/native';\nimport SelectIcon from \"./recentMessages/SelectIcon\";\nimport ContactInfo from \"./recentMessages/ContactInfo\";\nimport ReadIcon from \"./recentMessages/ReadIcon\";\nimport getContact from \"../../functions/getContact\";\nimport { useGlobal } from 'reactn';\n\nvar RecentMessagesListItem = function RecentMessagesListItem(_ref) {\n  var data = _ref.data,\n      isEditing = _ref.isEditing,\n      selectedItems = _ref.selectedItems,\n      messages = _ref.messages,\n      setMessages = _ref.setMessages,\n      navigation = _ref.navigation;\n  var id = data.id,\n      read = data.read;\n\n  var _useState = useState(read),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasRead = _useState2[0],\n      setHasRead = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSelected = _useState4[0],\n      setIsSelected = _useState4[1];\n\n  var _useGlobal = useGlobal('contacts'),\n      _useGlobal2 = _slicedToArray(_useGlobal, 1),\n      contacts = _useGlobal2[0];\n\n  var theme = useTheme();\n  useEffect(function () {\n    !isEditing ? setIsSelected(false) : '';\n  }, [isEditing]);\n\n  var handlePress = function handlePress() {\n    if (isEditing) {\n      setIsSelected(!isSelected);\n      var index = selectedItems.indexOf(id);\n      selectedItems.includes(id) ? selectedItems.splice(index, 1) : selectedItems.push(id);\n    } else {\n      setHasRead(true);\n      var contact = getContact(id, contacts);\n      navigation.push('Message', {\n        contact: contact,\n        totalMessages: messages ? messages.length : 0\n      });\n    }\n  };\n\n  return React.createElement(Swipeable, {\n    renderRightActions: function renderRightActions() {\n      return DeleteButton(theme.colors.notification, id, messages, setMessages);\n    },\n    overshootRight: false,\n    overshootFriction: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: handlePress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      paddingLeft: 16,\n      paddingRight: 16,\n      backgroundColor: theme.colors.card,\n      zIndex: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, React.createElement(ReadIcon, {\n    isEditing: isEditing,\n    hasRead: hasRead,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }), React.createElement(SelectIcon, {\n    isEditing: isEditing,\n    isSelected: isSelected,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }), React.createElement(ContactInfo, {\n    isEditing: isEditing,\n    data: data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default RecentMessagesListItem;","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/src/components/list/RecentMessagesListItem.tsx"],"names":["React","useEffect","useState","DeleteButton","Swipeable","useTheme","SelectIcon","ContactInfo","ReadIcon","getContact","useGlobal","RecentMessagesListItem","data","isEditing","selectedItems","messages","setMessages","navigation","id","read","hasRead","setHasRead","isSelected","setIsSelected","contacts","theme","handlePress","index","indexOf","includes","splice","push","contact","totalMessages","length","colors","notification","flexDirection","paddingLeft","paddingRight","backgroundColor","card","zIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Alert, TouchableWithoutFeedback, View } from 'react-native';\nimport DeleteButton from './recentMessages/DeleteButton';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { useTheme } from '@react-navigation/native';\nimport SelectIcon from './recentMessages/SelectIcon';\nimport ContactInfo from './recentMessages/ContactInfo';\nimport ReadIcon from './recentMessages/ReadIcon';\nimport getContact from '../../functions/getContact';\nimport { useGlobal } from 'reactn';\n\nconst RecentMessagesListItem = ({ data, isEditing, selectedItems, messages, setMessages, navigation }:Props) => {\n    const { id, read } = data;\n    const [ hasRead, setHasRead ] = useState<boolean>(read);\n    const [ isSelected, setIsSelected ] = useState(false);\n    const [ contacts ] = useGlobal<any>('contacts');\n    const theme = useTheme();\n\n    useEffect(() => {\n        !isEditing ? setIsSelected(false) : '';\n    }, [isEditing])\n    \n    const handlePress = () => {\n        if(isEditing){\n            setIsSelected(!isSelected);\n            const index = selectedItems.indexOf(id);\n            selectedItems.includes(id) ? selectedItems.splice(index, 1) : selectedItems.push(id);\n        } else {\n            setHasRead(true);\n\n            let contact = getContact(id, contacts);\n\n            navigation.push('Message', { contact, totalMessages: messages ? messages.length : 0 });\n        }\n    }\n\n    return (\n        <Swipeable\n            renderRightActions={() => DeleteButton(theme.colors.notification, id, messages, setMessages)}\n            overshootRight={false}\n            overshootFriction={8}\n        >\n            <TouchableWithoutFeedback onPress={handlePress}>\n                <View style={{ flexDirection: \"row\", paddingLeft: 16, paddingRight: 16, backgroundColor: theme.colors.card, zIndex: 2 }}>\n                    <ReadIcon isEditing={isEditing} hasRead={hasRead}/>\n                    <SelectIcon isEditing={isEditing} isSelected={isSelected}/>\n                    <ContactInfo isEditing={isEditing} data={data}/>\n                </View>\n            </TouchableWithoutFeedback>\n        </Swipeable>\n    )\n}\n\ninterface Props {\n    data:any,\n    isEditing: boolean,\n    selectedItems: any,\n    messages:any,\n    setMessages:any,\n    navigation: any\n}\n\nexport default RecentMessagesListItem;"]},"metadata":{},"sourceType":"module"}