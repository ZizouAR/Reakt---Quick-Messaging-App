{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { h, w } from \"../../config/dimensions\";\nimport Groups from \"../../screens/GroupsScreen\";\nimport RecentMessagesListScreen from \"../../screens/RecentMessagesListScreen\";\nimport Contacts from \"../../screens/ContactsScreen\";\nimport Scan from \"../../screens/Scan\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var tabBarStyle = {\n  bottom: 3.1 * h,\n  marginLeft: 5.3 * w,\n  marginRight: 5.3 * w,\n  elevation: 0,\n  borderRadius: 15,\n  height: 11.1 * h,\n  position: 'absolute',\n  paddingHorizontal: \"5%\",\n  paddingVertical: Platform.OS === 'ios' ? \"7%\" : null,\n  backgroundColor: \"#D6DEF8\"\n};\nvar Tab = createBottomTabNavigator();\nexport default function BottomNavigator(props) {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarShowLabel: false,\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          size = 30;\n\n          if (route.name === 'Chat') {\n            return _jsx(Ionicons, {\n              name: focused ? 'chatbubble-sharp' : 'chatbubble-outline',\n              size: size,\n              color: color\n            });\n          } else if (route.name === 'Groups') {\n            return _jsx(MaterialCommunityIcons, {\n              name: focused ? 'account-group' : 'account-group-outline',\n              size: size + 3,\n              color: color\n            });\n          } else if (route.name === 'Contacts') {\n            return _jsx(MaterialCommunityIcons, {\n              name: focused ? 'contacts' : 'contacts-outline',\n              size: size - 3,\n              color: color\n            });\n          } else if (route.name === 'Scan') {\n            return _jsx(Ionicons, {\n              name: focused ? 'ios-scan-circle' : 'ios-scan-circle-outline',\n              size: size + 2,\n              color: color\n            });\n          }\n        },\n        tabBarInactiveTintColor: 'black',\n        tabBarActiveTintColor: '#3366FF',\n        tabBarLabel: function tabBarLabel(_ref3) {\n          var focused = _ref3.focused;\n          var label;\n          return label = focused ? _jsx(Text, {\n            style: {\n              fontSize: 10,\n              color: \"#3366FF\"\n            },\n            children: route.name\n          }) : null;\n        },\n        tabBarStyle: _objectSpread({}, tabBarStyle)\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Chat\",\n      component: RecentMessagesListScreen,\n      options: {\n        tabBarBadge: 3,\n        tabBarBadgeStyle: {\n          marginTop: Platform.OS === 'ios' ? 0 : \"25%\"\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Groups\",\n      component: Groups\n    }), _jsx(Tab.Screen, {\n      name: \"Contacts\",\n      component: Contacts\n    }), _jsx(Tab.Screen, {\n      name: \"Scan\",\n      component: Scan,\n      options: {\n        headerShown: false\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/src/components/navigator/BottomNavigator.tsx"],"names":["React","createBottomTabNavigator","Ionicons","MaterialCommunityIcons","h","w","Groups","RecentMessagesListScreen","Contacts","Scan","tabBarStyle","bottom","marginLeft","marginRight","elevation","borderRadius","height","position","paddingHorizontal","paddingVertical","Platform","OS","backgroundColor","Tab","BottomNavigator","props","route","tabBarShowLabel","tabBarIcon","focused","color","size","name","tabBarInactiveTintColor","tabBarActiveTintColor","tabBarLabel","label","fontSize","tabBarBadge","tabBarBadgeStyle","marginTop","headerShown"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Ionicons } from '@expo/vector-icons';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Text, Platform } from 'react-native';\nimport { h, w } from \"../../config/dimensions\";\n\n// Screens\nimport Groups from '../../screens/GroupsScreen';\nimport RecentMessagesListScreen from '../../screens/RecentMessagesListScreen';\nimport Settings from '../../screens/SettingsScreen';\nimport Contacts from '../../screens/ContactsScreen';\nimport Scan from '../../screens/Scan';\nimport Feed from '../../screens/Feed';\n\n\nexport const tabBarStyle = {\n  bottom: 3.1 * h,\n  marginLeft: 5.3 * w,\n  marginRight: 5.3 * w,\n  elevation: 0,\n  borderRadius: 15,\n  height: 11.1 * h,\n  position: 'absolute', \n  paddingHorizontal: \"5%\",\n  paddingVertical: Platform.OS === 'ios' ? \"7%\" : null,\n  backgroundColor: \"#D6DEF8\"\n}\n\n\nconst Tab = createBottomTabNavigator();\n\n\nexport default function BottomNavigator(props: any) {\n\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarShowLabel: false,\n        tabBarIcon: ({ focused, color, size }) => {\n          size = 30\n          if (route.name === 'Chat') {\n            return (\n              <Ionicons\n                name={\n                  focused\n                    ? 'chatbubble-sharp'\n                    : 'chatbubble-outline'\n                }\n                size={size}\n                color={color}\n\n              />\n            );\n\n\n          } else if (route.name === 'Groups') {\n            return (\n              <MaterialCommunityIcons\n                name={focused ? 'account-group' : 'account-group-outline'}\n                size={size + 3}\n                color={color}\n              />\n            );\n          }\n\n          else if (route.name === 'Contacts') {\n            return (\n              <MaterialCommunityIcons\n                name={focused ? 'contacts' : 'contacts-outline'}\n                size={size - 3}\n                color={color}\n              />\n            );\n          }\n\n          else if (route.name === 'Scan') {\n            return (\n              <Ionicons\n                name={focused ? 'ios-scan-circle' : 'ios-scan-circle-outline'}\n                size={size + 2}\n                color={color}\n              />\n            );\n          }\n\n        },\n        tabBarInactiveTintColor: 'black',\n        tabBarActiveTintColor: '#3366FF',\n        tabBarLabel: ({ focused }) => {\n          let label;\n          return label = focused ? <Text style={{ fontSize: 10, color: \"#3366FF\" }}>{route.name}</Text> : null\n        },\n\n        tabBarStyle: {\n          ...tabBarStyle\n        }\n      })}\n    >\n      {/*<SegmentedControl/>*/}\n      <Tab.Screen\n        name=\"Chat\"\n        component={RecentMessagesListScreen}\n        options={{ tabBarBadge: 3, tabBarBadgeStyle: { marginTop: Platform.OS === 'ios' ? 0 : \"25%\" } }}\n      />\n      <Tab.Screen name=\"Groups\" component={Groups} />\n      <Tab.Screen name=\"Contacts\" component={Contacts} />\n      <Tab.Screen name=\"Scan\" component={Scan} options={{ headerShown: false }} />\n    </Tab.Navigator>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}