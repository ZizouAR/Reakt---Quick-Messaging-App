{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport 'react-native-gesture-handler';\nimport React, { useEffect, useState } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\nimport { createStackNavigator } from '@react-navigation/stack';\nvar Stack = createStackNavigator();\nimport { useGlobal, setGlobal } from 'reactn';\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport BottomNavigator from \"./src/components/navigator/BottomNavigator\";\nimport Groups from \"./src/screens/GroupsScreen\";\nimport ConversationScreen from \"./src/screens/ConversationScreen\";\nimport Login from \"./src/screens/Auth/Login\";\nimport FingerPrint from \"./src/screens/Auth/FingerPrint\";\nimport PhoneNumber from \"./src/screens/Auth/PhoneNumber\";\nimport SMSVerification from \"./src/screens/Auth/SMSVerification\";\nimport Welcome from \"./src/screens/Auth/Welcome\";\nimport Feed from \"./src/screens/Feed\";\nimport defaultContacts from \"./src/data/contacts.json\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function App() {\n  var scheme = useColorScheme();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useGlobal = useGlobal('contacts'),\n      _useGlobal2 = _slicedToArray(_useGlobal, 1),\n      contacts = _useGlobal2[0];\n\n  useEffect(function () {\n    if (!contacts) {\n      setGlobal({\n        contacts: defaultContacts\n      });\n    }\n\n    setLoaded(true);\n  }, []);\n  LogBox.ignoreAllLogs();\n\n  var iOSLightTheme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n    colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n      primary: \"#0071e3\",\n      text: \"#000\",\n      text2: \"#999\",\n      border: \"#EAEAEA\",\n      background: \"#f3f3f3\",\n      card: \"#fff\"\n    })\n  });\n\n  var iOSDarkTheme = _objectSpread(_objectSpread({}, DarkTheme), {}, {\n    colors: _objectSpread(_objectSpread({}, DarkTheme.colors), {}, {\n      primary: \"#0071e3\",\n      text: \"#FFF\",\n      text2: \"#999\",\n      border: \"#111\",\n      background: \"#222\",\n      card: \"#000\"\n    })\n  });\n\n  if (loaded) {\n    return _jsxs(_Fragment, {\n      children: [_jsx(StatusBar, {\n        barStyle: scheme === \"dark\" ? 'light-content' : \"dark-content\"\n      }), _jsx(AppearanceProvider, {\n        children: _jsx(NavigationContainer, {\n          theme: scheme === \"dark\" ? iOSDarkTheme : iOSLightTheme,\n          children: _jsxs(Stack.Navigator, {\n            initialRouteName: \"FingerPrint\",\n            children: [_jsx(Stack.Screen, {\n              name: \"Message\",\n              component: ConversationScreen,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Groups\",\n              component: Groups\n            }), _jsx(Stack.Screen, {\n              name: \"Home\",\n              component: BottomNavigator,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Feed\",\n              component: Feed\n            }), _jsx(Stack.Screen, {\n              name: \"Login\",\n              component: Login,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Welcome\",\n              component: Welcome,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"PhoneNumber\",\n              component: PhoneNumber,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"FingerPrint\",\n              component: FingerPrint,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"SMSVerification\",\n              component: SMSVerification,\n              options: {\n                headerShown: false\n              }\n            })]\n          })\n        })\n      })]\n    });\n  } else return null;\n}","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/App.tsx"],"names":["React","useEffect","useState","NavigationContainer","DefaultTheme","DarkTheme","AppearanceProvider","useColorScheme","createStackNavigator","Stack","useGlobal","setGlobal","BottomNavigator","Groups","ConversationScreen","Login","FingerPrint","PhoneNumber","SMSVerification","Welcome","Feed","defaultContacts","App","scheme","loaded","setLoaded","contacts","LogBox","ignoreAllLogs","iOSLightTheme","colors","primary","text","text2","border","background","card","iOSDarkTheme","headerShown"],"mappings":";;;;;;;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,mBAAT,EAA8BC,YAA9B,EAA4CC,SAA5C,QAAuE,0BAAvE;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,yBAAnD;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAAgE,IAAMC,KAAK,GAAGD,oBAAoB,EAAlC;AAChE,SAASE,SAAT,EAAoBC,SAApB,QAAqC,QAArC;;AAKA,OAAOC,eAAP;AAGA,OAAOC,MAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,KAAP;AACA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,OAAOC,eAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;AAIA,OAAOC,eAAP;;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,MAAMC,MAAM,GAAGhB,cAAc,EAA7B;;AACA,kBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAQsB,MAAR;AAAA,MAAgBC,SAAhB;;AACA,mBAAqBf,SAAS,CAAM,UAAN,CAA9B;AAAA;AAAA,MAAQgB,QAAR;;AAEAzB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAG,CAACyB,QAAJ,EAAa;AACXf,MAAAA,SAAS,CAAC;AACRe,QAAAA,QAAQ,EAAEL;AADF,OAAD,CAAT;AAGD;;AAEDI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GARQ,EAQN,EARM,CAAT;AAYFE,EAAAA,MAAM,CAACC,aAAP;;AAEE,MAAMC,aAAa,mCACdzB,YADc;AAEjB0B,IAAAA,MAAM,kCACD1B,YAAY,CAAC0B,MADZ;AAEJC,MAAAA,OAAO,EAAE,SAFL;AAGJC,MAAAA,IAAI,EAAE,MAHF;AAIJC,MAAAA,KAAK,EAAE,MAJH;AAKJC,MAAAA,MAAM,EAAE,SALJ;AAMJC,MAAAA,UAAU,EAAE,SANR;AAOJC,MAAAA,IAAI,EAAE;AAPF;AAFW,IAAnB;;AAaA,MAAMC,YAAY,mCACbhC,SADa;AAEhByB,IAAAA,MAAM,kCACDzB,SAAS,CAACyB,MADT;AAEJC,MAAAA,OAAO,EAAE,SAFL;AAGJC,MAAAA,IAAI,EAAE,MAHF;AAIJC,MAAAA,KAAK,EAAE,MAJH;AAKJC,MAAAA,MAAM,EAAE,MALJ;AAMJC,MAAAA,UAAU,EAAE,MANR;AAOJC,MAAAA,IAAI,EAAE;AAPF;AAFU,IAAlB;;AAaA,MAAGZ,MAAH,EAAU;AACR,WACE;AAAA,iBACE,KAAC,SAAD;AAAW,QAAA,QAAQ,EAAED,MAAM,KAAK,MAAX,GAAoB,eAApB,GAAsC;AAA3D,QADF,EAEE,KAAC,kBAAD;AAAA,kBACE,KAAC,mBAAD;AAAqB,UAAA,KAAK,EAAEA,MAAM,KAAK,MAAX,GAAoBc,YAApB,GAAmCR,aAA/D;AAAA,oBACE,MAAC,KAAD,CAAO,SAAP;AAAiB,YAAA,gBAAgB,EAAC,aAAlC;AAAA,uBAEE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,SAAnB;AAA6B,cAAA,SAAS,EAAEf,kBAAxC;AAA4D,cAAA,OAAO,EAAE;AAAEwB,gBAAAA,WAAW,EAAE;AAAf;AAArE,cAFF,EAGE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,QAAnB;AAA4B,cAAA,SAAS,EAAEzB;AAAvC,cAHF,EAIE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,MAAnB;AAA0B,cAAA,SAAS,EAAED,eAArC;AAAsD,cAAA,OAAO,EAAE;AAAE0B,gBAAAA,WAAW,EAAE;AAAf;AAA/D,cAJF,EAKE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,MAAnB;AAA0B,cAAA,SAAS,EAAElB;AAArC,cALF,EAOE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,OAAnB;AAA2B,cAAA,SAAS,EAAEL,KAAtC;AAA6C,cAAA,OAAO,EAAE;AAAEuB,gBAAAA,WAAW,EAAE;AAAf;AAAtD,cAPF,EAQE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,SAAnB;AAA6B,cAAA,SAAS,EAAEnB,OAAxC;AAAiD,cAAA,OAAO,EAAE;AAAEmB,gBAAAA,WAAW,EAAE;AAAf;AAA1D,cARF,EASE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,aAAnB;AAAiC,cAAA,SAAS,EAAErB,WAA5C;AAAyD,cAAA,OAAO,EAAE;AAAEqB,gBAAAA,WAAW,EAAE;AAAf;AAAlE,cATF,EAUE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,aAAnB;AAAiC,cAAA,SAAS,EAAEtB,WAA5C;AAAyD,cAAA,OAAO,EAAE;AAAEsB,gBAAAA,WAAW,EAAE;AAAf;AAAlE,cAVF,EAWE,KAAC,KAAD,CAAO,MAAP;AAAc,cAAA,IAAI,EAAC,iBAAnB;AAAqC,cAAA,SAAS,EAAEpB,eAAhD;AAAiE,cAAA,OAAO,EAAE;AAAEoB,gBAAAA,WAAW,EAAE;AAAf;AAA1E,cAXF;AAAA;AADF;AADF,QAFF;AAAA,MADF;AAsBD,GAvBD,MAuBO,OAAO,IAAP;AACR","sourcesContent":["import 'react-native-gesture-handler';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button, StatusBar } from 'react-native';\nimport { NavigationContainer, DefaultTheme, DarkTheme, useTheme } from '@react-navigation/native';\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\nimport { createStackNavigator } from '@react-navigation/stack'; const Stack = createStackNavigator();\nimport { useGlobal, setGlobal } from 'reactn';\nimport { LogBox } from 'react-native';\n\n// Components\nimport NewMessage from './src/components/buttons/NewMessage';\nimport BottomNavigator from './src/components/navigator/BottomNavigator';\n\n// Screens\nimport Groups from './src/screens/GroupsScreen';\nimport ConversationScreen from './src/screens/ConversationScreen';\nimport Login from './src/screens/Auth/Login'\nimport FingerPrint from './src/screens/Auth/FingerPrint'\nimport PhoneNumber from './src/screens/Auth/PhoneNumber'\nimport SMSVerification from './src/screens/Auth/SMSVerification'\nimport Welcome from './src/screens/Auth/Welcome'\nimport Feed from './src/screens/Feed'\n\n\n// Data\nimport defaultContacts from './src/data/contacts.json';\n\nexport default function App() {\n  const scheme = useColorScheme();\n  const [ loaded, setLoaded ] = useState(false);\n  const [ contacts ] = useGlobal<any>('contacts');\n\n  useEffect(() => {\n    if(!contacts){\n      setGlobal({\n        contacts: defaultContacts\n      })\n    }\n\n    setLoaded(true)\n  }, [])\n\n\n//LogBox.ignoreLogs(['Warning: ...']); // Ignore log notification by message\nLogBox.ignoreAllLogs();//Ignore all log notification\n\n  const iOSLightTheme = {\n    ...DefaultTheme,\n    colors: {\n      ...DefaultTheme.colors,\n      primary: \"#0071e3\",\n      text: \"#000\",\n      text2: \"#999\",\n      border: \"#EAEAEA\",\n      background: \"#f3f3f3\",\n      card: \"#fff\"\n    }\n  }\n  \n  const iOSDarkTheme = {\n    ...DarkTheme,\n    colors: {\n      ...DarkTheme.colors,\n      primary: \"#0071e3\",\n      text: \"#FFF\",\n      text2: \"#999\",\n      border: \"#111\",\n      background: \"#222\",\n      card: \"#000\"\n    }\n  }\n\n  if(loaded){\n    return (\n      <>\n        <StatusBar barStyle={scheme === \"dark\" ? 'light-content' : \"dark-content\"}/>\n        <AppearanceProvider>\n          <NavigationContainer theme={scheme === \"dark\" ? iOSDarkTheme : iOSLightTheme}>\n            <Stack.Navigator initialRouteName=\"FingerPrint\">\n              {/* Logged-in stack */}\n              <Stack.Screen name=\"Message\" component={ConversationScreen} options={{ headerShown: false }}/>\n              <Stack.Screen name=\"Groups\" component={Groups}/>\n              <Stack.Screen name=\"Home\" component={BottomNavigator} options={{ headerShown: false }}/>\n              <Stack.Screen name=\"Feed\" component={Feed}/>\n              {/* Logged-out stack */}\n              <Stack.Screen name=\"Login\" component={Login} options={{ headerShown: false }}/>\n              <Stack.Screen name=\"Welcome\" component={Welcome} options={{ headerShown: false }}/>\n              <Stack.Screen name=\"PhoneNumber\" component={PhoneNumber} options={{ headerShown: false }}/>\n              <Stack.Screen name=\"FingerPrint\" component={FingerPrint} options={{ headerShown: false }}/>\n              <Stack.Screen name=\"SMSVerification\" component={SMSVerification} options={{ headerShown: false }}/>\n            </Stack.Navigator>\n          </NavigationContainer>\n        </AppearanceProvider>\n      </>\n    );\n  } else return null;\n}"]},"metadata":{},"sourceType":"module"}