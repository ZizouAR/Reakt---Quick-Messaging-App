{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nginx-iwnl/messages/src/components/buttons/GenerateNewUserAndMessageButton.tsx\";\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from 'axios';\nimport { useGlobal, setGlobal } from 'reactn';\nimport generateNewID from \"../../functions/generateNewID\";\nimport generateRandomSentence from \"../../functions/generateRandomSentance\";\n\nvar GenerateNewUserAndMessageButton = function GenerateNewUserAndMessageButton(_ref) {\n  var setFirstModalActive = _ref.setFirstModalActive,\n      setMessages = _ref.setMessages,\n      messages = _ref.messages;\n\n  var _useGlobal = useGlobal('contacts'),\n      _useGlobal2 = _slicedToArray(_useGlobal, 1),\n      contacts = _useGlobal2[0];\n\n  var generateNewMessage = function generateNewMessage(id, name) {\n    var message = {};\n    message.id = id;\n    message.message = generateRandomSentence();\n    message.name = name;\n    message.sender = Math.random() > .5 ? id : 0;\n    message.receiver = message.sender == id ? 0 : id;\n    message.time = +new Date();\n    message.read = message.sender == 0 ? true : false;\n    return message;\n  };\n\n  var generate = function generate() {\n    var uri = \"https://randomuser.me/api\";\n    var newUser = {};\n    setGlobal({\n      newUserIsCreating: true\n    });\n    axios.get(uri).then(function (res) {\n      var data = res.data.results[0];\n      newUser.id = generateNewID(contacts);\n      newUser.name = data.name.first + \" \" + data.name.last;\n      newUser.phone = data.phone;\n      newUser.email = data.email;\n      newUser.gender = data.gender;\n      newUser.image = newUser.id < 100 ? Math.random() > .5 ? true : false : false;\n      var newMessage = generateNewMessage(newUser.id, newUser.name);\n      newUser.messages = [newMessage];\n      var newContacts = [].concat(_toConsumableArray(contacts), [newUser]);\n      setGlobal({\n        contacts: newContacts\n      });\n      var newList = [].concat(_toConsumableArray(messages), [newMessage]);\n      newList.sort(function (a, b) {\n        return a.time > b.time ? -1 : 1;\n      });\n      setMessages(newList);\n    }).catch(function (err) {\n      Alert.alert(\"Got a 503 when fetching data, please retry again.\");\n      console.log(err);\n    });\n    setFirstModalActive(false);\n    setGlobal({\n      newUserIsCreating: false\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      padding: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Generate new message\",\n    onPress: generate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default GenerateNewUserAndMessageButton;","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/src/components/buttons/GenerateNewUserAndMessageButton.tsx"],"names":["React","axios","useGlobal","setGlobal","generateNewID","generateRandomSentence","GenerateNewUserAndMessageButton","setFirstModalActive","setMessages","messages","contacts","generateNewMessage","id","name","message","sender","Math","random","receiver","time","Date","read","generate","uri","newUser","newUserIsCreating","get","then","res","data","results","first","last","phone","email","gender","image","newMessage","newContacts","newList","sort","a","b","catch","err","Alert","alert","console","log","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, Button, Alert } from 'react-native';\nimport axios from 'axios';\nimport { useGlobal, setGlobal } from 'reactn';\n\n// Type\nimport Contact from '../../types/Contact';\nimport Message from '../../types/Message';\n\n// Function\nimport generateNewID from '../../functions/generateNewID';\nimport generateRandomSentence from '../../functions/generateRandomSentance';\n\nconst GenerateNewUserAndMessageButton = ({ setFirstModalActive, setMessages, messages }:Props) => {\n    const [ contacts ] = useGlobal<any>('contacts');\n\n    const generateNewMessage = (id:number, name:string):Message => {\n        let message:Message = {}\n\n        message.id = id;\n        message.message = generateRandomSentence();\n        message.name = name\n        message.sender = Math.random() > .5 ? id : 0;\n        message.receiver = message.sender == id ? 0 : id;\n        message.time = +new Date();\n        message.read = message.sender == 0 ? true : false\n        \n        return message;\n    }\n    \n    const generate = () => {\n        const uri = \"https://randomuser.me/api\"\n        let newUser:Contact = {};\n        setGlobal({\n            newUserIsCreating: true\n        })\n        \n        // Fetch data for new user\n        axios\n        .get(uri)\n        .then(res => {\n            let data = res.data.results[0]\n\n            newUser.id = generateNewID(contacts);\n            newUser.name = `${data.name.first} ${data.name.last}`;\n            newUser.phone = data.phone;\n            newUser.email = data.email;\n            newUser.gender = data.gender;\n            newUser.image = newUser.id < 100 ? Math.random() > .5 ? true : false : false;\n\n            let newMessage = generateNewMessage(newUser.id, newUser.name);\n            newUser.messages = [newMessage]; \n\n            let newContacts = [...contacts, newUser];\n            setGlobal({ contacts: newContacts });\n\n            // Append to messages\n\n            let newList = [...messages, newMessage];\n            newList.sort((a, b) => {\n                return (a.time > b.time) ? -1 : 1;\n            })\n            \n            setMessages(newList)\n        })\n        .catch(err => {\n            Alert.alert(\"Got a 503 when fetching data, please retry again.\");\n            console.log(err);\n        });\n\n\n        setFirstModalActive(false);\n\n        setGlobal({\n            newUserIsCreating: false\n        })\n    }\n\n    return (\n        <View style={{ padding: 16 }}>\n            <Button title=\"Generate new message\" onPress={generate}/>\n        </View>\n    )\n}\n\ninterface Props {\n    setFirstModalActive: any,\n    messages: any,\n    setMessages: any\n}\n\nexport default GenerateNewUserAndMessageButton;"]},"metadata":{},"sourceType":"module"}