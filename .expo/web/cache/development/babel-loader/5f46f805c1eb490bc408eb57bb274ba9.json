{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableRipple, Text } from 'react-native-paper';\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\nimport AppStyles from \"../../config/styles\";\nimport PropTypes from 'prop-types';\nimport Avatar from \"../Avatar\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ContactItem = function (_Component) {\n  _inherits(ContactItem, _Component);\n\n  var _super = _createSuper(ContactItem);\n\n  function ContactItem() {\n    var _this;\n\n    _classCallCheck(this, ContactItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onPress = function () {\n      console.log('Pressed');\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$item = this.props.item,\n          name = _this$props$item.name,\n          picture = _this$props$item.picture,\n          login = _this$props$item.login;\n      return _jsx(TouchableRipple, {\n        onPress: this.onPress,\n        rippleColor: \"rgba(0, 0, 0, .32)\",\n        children: _jsxs(View, {\n          style: styles.item,\n          children: [_jsx(Avatar, {\n            uri: picture.thumbnail\n          }), _jsxs(View, {\n            style: styles.nameView,\n            children: [_jsx(Text, {\n              style: styles.head,\n              children: name.first[0].toUpperCase() + name.first.slice(1) + ' ' + name.last[0].toUpperCase() + name.last.slice(1)\n            }), _jsxs(Text, {\n              style: styles.sub,\n              children: [\"@\", login.username]\n            })]\n          }), _jsx(TouchableRipple, {\n            onPress: this.onPress,\n            style: styles.icon,\n            rippleColor: \"rgba(0, 0, 0, .32)\",\n            children: _jsx(Icon, {\n              size: 24,\n              color: AppStyles.colors.accentColor,\n              name: \"call\"\n            })\n          }), _jsx(TouchableRipple, {\n            onPress: this.onPress,\n            style: styles.icon,\n            rippleColor: \"rgba(0, 0, 0, .32)\",\n            children: _jsx(Icon, {\n              size: 24,\n              color: AppStyles.colors.accentColor,\n              name: \"videocam\"\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return ContactItem;\n}(Component);\n\nexport { ContactItem as default };\nContactItem.propTypes = {\n  name: PropTypes.object,\n  picture: PropTypes.object,\n  login: PropTypes.object,\n  item: PropTypes.object\n};","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/src/components/ContactList/ContactItem.tsx"],"names":["React","Component","TouchableRipple","Text","Icon","AppStyles","PropTypes","Avatar","styles","ContactItem","onPress","console","log","props","item","name","picture","login","thumbnail","nameView","head","first","toUpperCase","slice","last","sub","username","icon","colors","accentColor","propTypes","object"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,eAAT,EAA0BC,IAA1B,QAAsC,oBAAtC;AACA,OAAOC,IAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP;AAEA,OAAOC,MAAP;;;;IAEqBC,W;;;;;;;;;;;;;;;;UACjBC,O,GAAU,YAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,K;;;;;;;WAID,kBAAS;AACL,6BAAiC,KAAKC,KAAL,CAAWC,IAA5C;AAAA,UAAQC,IAAR,oBAAQA,IAAR;AAAA,UAAcC,OAAd,oBAAcA,OAAd;AAAA,UAAuBC,KAAvB,oBAAuBA,KAAvB;AAEA,aACI,KAAC,eAAD;AACI,QAAA,OAAO,EAAE,KAAKP,OADlB;AAEI,QAAA,WAAW,EAAC,oBAFhB;AAAA,kBAII,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEF,MAAM,CAACM,IAApB;AAAA,qBACA,KAAC,MAAD;AAAQ,YAAA,GAAG,EAAEE,OAAO,CAACE;AAArB,YADA,EAEI,MAAC,IAAD;AAAM,YAAA,KAAK,EAAEV,MAAM,CAACW,QAApB;AAAA,uBACI,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEX,MAAM,CAACY,IAApB;AAAA,wBACKL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcC,WAAd,KACGP,IAAI,CAACM,KAAL,CAAWE,KAAX,CAAiB,CAAjB,CADH,GAEG,GAFH,GAGGR,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaF,WAAb,EAHH,GAIGP,IAAI,CAACS,IAAL,CAAUD,KAAV,CAAgB,CAAhB;AALR,cADJ,EAQI,MAAC,IAAD;AAAM,cAAA,KAAK,EAAEf,MAAM,CAACiB,GAApB;AAAA,8BAA2BR,KAAK,CAACS,QAAjC;AAAA,cARJ;AAAA,YAFJ,EAYI,KAAC,eAAD;AACI,YAAA,OAAO,EAAE,KAAKhB,OADlB;AAEI,YAAA,KAAK,EAAEF,MAAM,CAACmB,IAFlB;AAGI,YAAA,WAAW,EAAC,oBAHhB;AAAA,sBAKI,KAAC,IAAD;AACI,cAAA,IAAI,EAAE,EADV;AAEI,cAAA,KAAK,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC,WAF5B;AAGI,cAAA,IAAI,EAAC;AAHT;AALJ,YAZJ,EAuBI,KAAC,eAAD;AACI,YAAA,OAAO,EAAE,KAAKnB,OADlB;AAEI,YAAA,KAAK,EAAEF,MAAM,CAACmB,IAFlB;AAGI,YAAA,WAAW,EAAC,oBAHhB;AAAA,sBAKI,KAAC,IAAD;AACI,cAAA,IAAI,EAAE,EADV;AAEI,cAAA,KAAK,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC,WAF5B;AAGI,cAAA,IAAI,EAAC;AAHT;AALJ,YAvBJ;AAAA;AAJJ,QADJ;AA0CH;;;;EApDoC5B,S;;SAApBQ,W;AAuDrBA,WAAW,CAACqB,SAAZ,GAAwB;AACpBf,EAAAA,IAAI,EAAET,SAAS,CAACyB,MADI;AAEpBf,EAAAA,OAAO,EAAEV,SAAS,CAACyB,MAFC;AAGpBd,EAAAA,KAAK,EAAEX,SAAS,CAACyB,MAHG;AAIpBjB,EAAAA,IAAI,EAAER,SAAS,CAACyB;AAJI,CAAxB","sourcesContent":["import React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { TouchableRipple, Text } from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport AppStyles from '../../config/styles'\nimport PropTypes from 'prop-types';\nimport Avatar from '../Avatar';\n\nimport styles from './styles';\n\nexport default class ContactItem extends Component {\n    onPress = () => {\n        console.log('Pressed');\n    };\n    static propTypes: { name: PropTypes.Requireable<object>; picture: PropTypes.Requireable<object>; login: PropTypes.Requireable<object>; item: PropTypes.Requireable<object>; };\n    \n    \n    render() {\n        const { name, picture, login } = this.props.item;\n\n        return (\n            <TouchableRipple\n                onPress={this.onPress}\n                rippleColor=\"rgba(0, 0, 0, .32)\"\n            >\n                <View style={styles.item}>\n                <Avatar uri={picture.thumbnail} />\n                    <View style={styles.nameView}>\n                        <Text style={styles.head}>\n                            {name.first[0].toUpperCase() +\n                                name.first.slice(1) +\n                                ' ' +\n                                name.last[0].toUpperCase() +\n                                name.last.slice(1)}\n                        </Text>\n                        <Text style={styles.sub}>@{login.username}</Text>\n                    </View>\n                    <TouchableRipple\n                        onPress={this.onPress}\n                        style={styles.icon}\n                        rippleColor=\"rgba(0, 0, 0, .32)\"\n                    >\n                        <Icon\n                            size={24}\n                            color={AppStyles.colors.accentColor}\n                            name=\"call\"\n                        />\n                    </TouchableRipple>\n                    <TouchableRipple\n                        onPress={this.onPress}\n                        style={styles.icon}\n                        rippleColor=\"rgba(0, 0, 0, .32)\"\n                    >\n                        <Icon\n                            size={24}\n                            color={AppStyles.colors.accentColor}\n                            name=\"videocam\"\n                        />\n                    </TouchableRipple>\n                </View>\n            </TouchableRipple>\n        );\n    }\n}\n\nContactItem.propTypes = {\n    name: PropTypes.object,\n    picture: PropTypes.object,\n    login: PropTypes.object,\n    item: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}