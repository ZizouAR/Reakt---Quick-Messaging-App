{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TagInput from 'react-native-tag-input';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar inputProps = {\n  keyboardType: 'default',\n  placeholder: '@user',\n  autoFocus: true,\n  style: {\n    fontSize: 14,\n    marginVertical: Platform.OS == 'ios' ? 10 : -2\n  }\n};\n\nvar InputAutoCompleteChips = function (_Component) {\n  _inherits(InputAutoCompleteChips, _Component);\n\n  var _super = _createSuper(InputAutoCompleteChips);\n\n  function InputAutoCompleteChips() {\n    var _this;\n\n    _classCallCheck(this, InputAutoCompleteChips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      tags: [\"Abdelhamid Larachi\"],\n      text: \"\"\n    };\n\n    _this.onChangeTags = function (tags) {\n      _this.setState({\n        tags: tags\n      });\n    };\n\n    _this.onChangeText = function (text) {\n      _this.setState({\n        text: text\n      });\n\n      var lastTyped = text.charAt(text.length - 1);\n      var parseWhen = [',', ' ', ';', '\\n'];\n\n      if (text.length > 1) {\n        if (parseWhen.indexOf(lastTyped) > -1) {\n          _this.setState({\n            tags: [].concat(_toConsumableArray(_this.state.tags), [_this.state.text]),\n            text: \"\"\n          });\n        }\n      }\n    };\n\n    _this.labelExtractor = function (tag) {\n      return tag;\n    };\n\n    return _this;\n  }\n\n  _createClass(InputAutoCompleteChips, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(TagInput, {\n        value: this.state.tags,\n        onChange: this.onChangeTags,\n        labelExtractor: this.labelExtractor,\n        text: this.state.text,\n        onChangeText: this.onChangeText,\n        tagColor: \"#007aff\",\n        tagTextColor: \"white\",\n        inputProps: inputProps,\n        tagContainerStyle: {\n          height: \"80%\",\n          borderRadius: 10\n        }\n      });\n    }\n  }]);\n\n  return InputAutoCompleteChips;\n}(Component);\n\nexport { InputAutoCompleteChips as default };","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/src/components/Inputs/InputAutoCompleteChips.jsx"],"names":["React","Component","TagInput","inputProps","keyboardType","placeholder","autoFocus","style","fontSize","marginVertical","Platform","OS","InputAutoCompleteChips","state","tags","text","onChangeTags","setState","onChangeText","lastTyped","charAt","length","parseWhen","indexOf","labelExtractor","tag","height","borderRadius"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAOC,QAAP,MAAqB,wBAArB;;AAGA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,YAAY,EAAE,SADG;AAEjBC,EAAAA,WAAW,EAAE,OAFI;AAGjBC,EAAAA,SAAS,EAAE,IAHM;AAIjBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,cAAc,EAAEC,QAAQ,CAACC,EAAT,IAAe,KAAf,GAAuB,EAAvB,GAA4B,CAAC;AAFxC;AAJU,CAAnB;;IAYqBC,sB;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,CAAC,oBAAD,CADA;AAENC,MAAAA,IAAI,EAAE;AAFA,K;;UAKRC,Y,GAAe,UAACF,IAAD,EAAU;AACvB,YAAKG,QAAL,CAAc;AAAEH,QAAAA,IAAI,EAAJA;AAAF,OAAd;AACD,K;;UAEDI,Y,GAAe,UAACH,IAAD,EAAU;AACvB,YAAKE,QAAL,CAAc;AAAEF,QAAAA,IAAI,EAAJA;AAAF,OAAd;;AAEA,UAAMI,SAAS,GAAGJ,IAAI,CAACK,MAAL,CAAYL,IAAI,CAACM,MAAL,GAAc,CAA1B,CAAlB;AACA,UAAMC,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAlB;;AAEA,UAAGP,IAAI,CAACM,MAAL,GAAc,CAAjB,EAAmB;AACnB,YAAIC,SAAS,CAACC,OAAV,CAAkBJ,SAAlB,IAA+B,CAAC,CAApC,EAAuC;AACrC,gBAAKF,QAAL,CAAc;AACZH,YAAAA,IAAI,+BAAM,MAAKD,KAAL,CAAWC,IAAjB,IAAuB,MAAKD,KAAL,CAAWE,IAAlC,EADQ;AAEZA,YAAAA,IAAI,EAAE;AAFM,WAAd;AAID;AAAC;AACL,K;;UAECS,c,GAAiB,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,K;;;;;;;WAGjB,kBAAS;AACP,aACI,KAAC,QAAD;AACA,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWC,IADlB;AAEA,QAAA,QAAQ,EAAE,KAAKE,YAFf;AAGA,QAAA,cAAc,EAAE,KAAKQ,cAHrB;AAIA,QAAA,IAAI,EAAE,KAAKX,KAAL,CAAWE,IAJjB;AAKA,QAAA,YAAY,EAAE,KAAKG,YALnB;AAMA,QAAA,QAAQ,EAAC,SANT;AAOA,QAAA,YAAY,EAAC,OAPb;AAQA,QAAA,UAAU,EAAEf,UARZ;AASA,QAAA,iBAAiB,EAAE;AAACuB,UAAAA,MAAM,EAAE,KAAT;AAAgBC,UAAAA,YAAY,EAAE;AAA9B;AATnB,QADJ;AAaD;;;;EA1CiD1B,S;;SAA/BW,sB","sourcesContent":["import React, { Component } from 'react';\nimport { Platform } from 'react-native';\nimport TagInput from 'react-native-tag-input';\n\n\nconst inputProps = {\n  keyboardType: 'default',\n  placeholder: '@user',\n  autoFocus: true,\n  style: {\n    fontSize: 14,\n    marginVertical: Platform.OS == 'ios' ? 10 : -2,\n  },\n};\n\n\n\nexport default class InputAutoCompleteChips extends Component {\n  state = {\n    tags: [\"Abdelhamid Larachi\"],\n    text: \"\"\n  };\n\n  onChangeTags = (tags) => {\n    this.setState({ tags });\n  }\n\n  onChangeText = (text) => {\n    this.setState({ text });\n    \n    const lastTyped = text.charAt(text.length - 1);\n    const parseWhen = [',', ' ', ';', '\\n'];\n\n    if(text.length > 1){\n    if (parseWhen.indexOf(lastTyped) > -1) {\n      this.setState({\n        tags: [...this.state.tags, this.state.text],\n        text: \"\",\n      });\n    }}\n}\n\n  labelExtractor = (tag) => tag;\n\n\n  render() {\n    return (\n        <TagInput\n        value={this.state.tags}\n        onChange={this.onChangeTags}\n        labelExtractor={this.labelExtractor}\n        text={this.state.text}\n        onChangeText={this.onChangeText}\n        tagColor=\"#007aff\"\n        tagTextColor=\"white\"\n        inputProps={inputProps}\n        tagContainerStyle={{height: \"80%\", borderRadius: 10}}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}