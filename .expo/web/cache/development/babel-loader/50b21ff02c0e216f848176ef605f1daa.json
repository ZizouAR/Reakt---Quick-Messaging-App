{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport invariant from 'invariant';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowWidth = Dimensions.get('window').width;\n\nvar TagInput = function (_React$PureComponent) {\n  _inherits(TagInput, _React$PureComponent);\n\n  var _super = _createSuper(TagInput);\n\n  function TagInput(props) {\n    var _this;\n\n    _classCallCheck(this, TagInput);\n\n    _this = _super.call(this, props);\n    _this.wrapperWidth = windowWidth;\n    _this.spaceLeft = 0;\n    _this.contentHeight = 0;\n    _this.tagInput = null;\n    _this.scrollView = null;\n\n    _this.measureWrapper = function (event) {\n      _this.wrapperWidth = event.nativeEvent.layout.width;\n      var inputWidth = TagInput.inputWidth(_this.props.text, _this.spaceLeft, _this.props.inputDefaultWidth, _this.wrapperWidth);\n\n      if (inputWidth !== _this.state.inputWidth) {\n        _this.setState({\n          inputWidth: inputWidth\n        });\n      }\n    };\n\n    _this.onBlur = function (event) {\n      invariant(Platform.OS === \"ios\", \"only iOS gets text on TextInput.onBlur\");\n\n      _this.props.onChangeText(event.nativeEvent.text);\n    };\n\n    _this.onKeyPress = function (event) {\n      if (_this.props.text !== '' || event.nativeEvent.key !== 'Backspace') {\n        return;\n      }\n\n      var tags = _toConsumableArray(_this.props.value);\n\n      tags.pop();\n\n      _this.props.onChange(tags);\n\n      _this.scrollToEnd();\n\n      _this.focus();\n    };\n\n    _this.focus = function () {\n      invariant(_this.tagInput, \"should be set\");\n\n      _this.tagInput.focus();\n    };\n\n    _this.removeIndex = function (index) {\n      var tags = _toConsumableArray(_this.props.value);\n\n      tags.splice(index, 1);\n\n      _this.props.onChange(tags);\n    };\n\n    _this.scrollToEnd = function () {\n      var scrollView = _this.scrollView;\n      invariant(scrollView, \"this.scrollView ref should exist before scrollToEnd called\");\n      setTimeout(function () {\n        scrollView.scrollToEnd({\n          animated: true\n        });\n      }, 0);\n    };\n\n    _this.tagInputRef = function (tagInput) {\n      invariant(typeof tagInput === \"object\", \"TextInput ref is object\");\n      _this.tagInput = tagInput;\n    };\n\n    _this.scrollViewRef = function (scrollView) {\n      invariant(typeof scrollView === \"object\", \"ScrollView ref is object\");\n      _this.scrollView = scrollView;\n    };\n\n    _this.onScrollViewContentSizeChange = function (w, h) {\n      if (_this.contentHeight === h) {\n        return;\n      }\n\n      var nextWrapperHeight = Math.min(_this.props.maxHeight, h);\n\n      if (nextWrapperHeight !== _this.state.wrapperHeight) {\n        _this.setState({\n          wrapperHeight: nextWrapperHeight\n        }, _this.contentHeight < h ? _this.scrollToEnd : undefined);\n      } else if (_this.contentHeight < h) {\n        _this.scrollToEnd();\n      }\n\n      _this.contentHeight = h;\n    };\n\n    _this.onLayoutLastTag = function (endPosOfTag) {\n      var margin = 3;\n      _this.spaceLeft = _this.wrapperWidth - endPosOfTag - margin - 10;\n      var inputWidth = TagInput.inputWidth(_this.props.text, _this.spaceLeft, _this.props.inputDefaultWidth, _this.wrapperWidth);\n\n      if (inputWidth !== _this.state.inputWidth) {\n        _this.setState({\n          inputWidth: inputWidth\n        });\n      }\n    };\n\n    _this.state = {\n      inputWidth: props.inputDefaultWidth,\n      wrapperHeight: 36\n    };\n    return _this;\n  }\n\n  _createClass(TagInput, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var inputWidth = TagInput.inputWidth(nextProps.text, this.spaceLeft, nextProps.inputDefaultWidth, this.wrapperWidth);\n\n      if (inputWidth !== this.state.inputWidth) {\n        this.setState({\n          inputWidth: inputWidth\n        });\n      }\n\n      var wrapperHeight = Math.min(nextProps.maxHeight, this.contentHeight);\n\n      if (wrapperHeight !== this.state.wrapperHeight) {\n        this.setState({\n          wrapperHeight: wrapperHeight\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (this.props.onHeightChange && nextState.wrapperHeight !== this.state.wrapperHeight) {\n        this.props.onHeightChange(nextState.wrapperHeight);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tags = this.props.value.map(function (tag, index) {\n        return _jsx(Tag, {\n          index: index,\n          label: _this2.props.labelExtractor(tag),\n          isLastTag: _this2.props.value.length === index + 1,\n          onLayoutLastTag: _this2.onLayoutLastTag,\n          removeIndex: _this2.removeIndex,\n          tagColor: _this2.props.tagColor,\n          tagTextColor: _this2.props.tagTextColor,\n          tagContainerStyle: _this2.props.tagContainerStyle,\n          tagTextStyle: _this2.props.tagTextStyle,\n          editable: _this2.props.editable\n        }, index);\n      });\n      return _jsx(TouchableWithoutFeedback, {\n        onPress: this.focus,\n        style: styles.container,\n        onLayout: this.measureWrapper,\n        children: _jsx(View, {\n          style: [styles.wrapper, {\n            height: this.state.wrapperHeight\n          }],\n          children: _jsx(ScrollView, _objectSpread(_objectSpread({\n            ref: this.scrollViewRef,\n            style: styles.tagInputContainerScroll,\n            onContentSizeChange: this.onScrollViewContentSizeChange,\n            keyboardShouldPersistTaps: \"handled\"\n          }, this.props.scrollViewProps), {}, {\n            children: _jsxs(View, {\n              style: styles.tagInputContainer,\n              children: [tags, _jsx(View, {\n                style: [styles.textInputContainer, {\n                  width: this.state.inputWidth\n                }],\n                children: _jsx(TextInput, _objectSpread({\n                  ref: this.tagInputRef,\n                  blurOnSubmit: false,\n                  onKeyPress: this.onKeyPress,\n                  value: this.props.text,\n                  style: [styles.textInput, {\n                    width: this.state.inputWidth,\n                    color: this.props.inputColor\n                  }],\n                  onBlur: Platform.OS === \"ios\" ? this.onBlur : undefined,\n                  onChangeText: this.props.onChangeText,\n                  autoCapitalize: \"none\",\n                  autoCorrect: false,\n                  placeholder: \"Start typing\",\n                  returnKeyType: \"done\",\n                  keyboardType: \"default\",\n                  editable: this.props.editable,\n                  underlineColorAndroid: \"rgba(0,0,0,0)\"\n                }, this.props.inputProps))\n              })]\n            })\n          }))\n        })\n      });\n    }\n  }], [{\n    key: \"inputWidth\",\n    value: function inputWidth(text, spaceLeft, inputDefaultWidth, wrapperWidth) {\n      if (text === \"\") {\n        return inputDefaultWidth;\n      } else if (spaceLeft >= 100) {\n        return spaceLeft - 10;\n      } else {\n        return wrapperWidth;\n      }\n    }\n  }]);\n\n  return TagInput;\n}(React.PureComponent);\n\nTagInput.propTypes = {\n  value: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  labelExtractor: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  onChangeText: PropTypes.func.isRequired,\n  editable: PropTypes.bool,\n  tagColor: PropTypes.string,\n  tagTextColor: PropTypes.string,\n  tagContainerStyle: ViewPropTypes.style,\n  tagTextStyle: Text.propTypes.style,\n  inputDefaultWidth: PropTypes.number,\n  inputColor: PropTypes.string,\n  inputProps: PropTypes.shape(TextInput.propTypes),\n  maxHeight: PropTypes.number,\n  onHeightChange: PropTypes.func,\n  scrollViewProps: PropTypes.shape(ScrollView.propTypes)\n};\nTagInput.defaultProps = {\n  editable: true,\n  tagColor: '#dddddd',\n  tagTextColor: '#777777',\n  inputDefaultWidth: 90,\n  inputColor: '#777777',\n  maxHeight: 75\n};\n\nvar Tag = function (_React$PureComponent2) {\n  _inherits(Tag, _React$PureComponent2);\n\n  var _super2 = _createSuper(Tag);\n\n  function Tag() {\n    var _this3;\n\n    _classCallCheck(this, Tag);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this3 = _super2.call.apply(_super2, [this].concat(args));\n    _this3.curPos = null;\n\n    _this3.onPress = function () {\n      _this3.props.removeIndex(_this3.props.index);\n    };\n\n    _this3.onLayoutLastTag = function (event) {\n      var layout = event.nativeEvent.layout;\n      _this3.curPos = layout.width + layout.x;\n\n      if (_this3.props.isLastTag) {\n        _this3.props.onLayoutLastTag(_this3.curPos);\n      }\n    };\n\n    return _this3;\n  }\n\n  _createClass(Tag, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!this.props.isLastTag && nextProps.isLastTag && this.curPos !== null && this.curPos !== undefined) {\n        this.props.onLayoutLastTag(this.curPos);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tagLabel;\n\n      if (React.isValidElement(this.props.label)) {\n        tagLabel = this.props.label;\n      } else {\n        tagLabel = _jsxs(Text, {\n          style: [styles.tagText, {\n            color: this.props.tagTextColor\n          }, this.props.tagTextStyle],\n          children: [this.props.label, \"\\xA0\\xD7\"]\n        });\n      }\n\n      return _jsx(TouchableOpacity, {\n        disabled: !this.props.editable,\n        onPress: this.onPress,\n        onLayout: this.onLayoutLastTag,\n        style: [styles.tag, {\n          backgroundColor: this.props.tagColor\n        }, this.props.tagContainerStyle],\n        children: tagLabel\n      });\n    }\n  }]);\n\n  return Tag;\n}(React.PureComponent);\n\nTag.propTypes = {\n  index: PropTypes.number.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  isLastTag: PropTypes.bool.isRequired,\n  editable: PropTypes.bool.isRequired,\n  onLayoutLastTag: PropTypes.func.isRequired,\n  removeIndex: PropTypes.func.isRequired,\n  tagColor: PropTypes.string.isRequired,\n  tagTextColor: PropTypes.string.isRequired,\n  tagContainerStyle: ViewPropTypes.style,\n  tagTextStyle: Text.propTypes.style\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  wrapper: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 3,\n    marginBottom: 2,\n    alignItems: 'flex-start'\n  },\n  tagInputContainerScroll: {\n    flex: 1\n  },\n  tagInputContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  textInput: {\n    height: 36,\n    fontSize: 16,\n    flex: .6,\n    marginBottom: 6,\n    padding: 0\n  },\n  textInputContainer: {\n    height: 36\n  },\n  tag: {\n    justifyContent: 'center',\n    marginTop: 6,\n    marginRight: 3,\n    padding: 8,\n    height: 24,\n    borderRadius: 2\n  },\n  tagText: {\n    padding: 0,\n    margin: 0\n  }\n});\nexport default TagInput;","map":{"version":3,"sources":["/Users/nginx-iwnl/messages/node_modules/react-native-tag-input/index.js"],"names":["React","PropTypes","ViewPropTypes","invariant","windowWidth","Dimensions","get","width","TagInput","props","wrapperWidth","spaceLeft","contentHeight","tagInput","scrollView","measureWrapper","event","nativeEvent","layout","inputWidth","text","inputDefaultWidth","state","setState","onBlur","Platform","OS","onChangeText","onKeyPress","key","tags","value","pop","onChange","scrollToEnd","focus","removeIndex","index","splice","setTimeout","animated","tagInputRef","scrollViewRef","onScrollViewContentSizeChange","w","h","nextWrapperHeight","Math","min","maxHeight","wrapperHeight","undefined","onLayoutLastTag","endPosOfTag","margin","nextProps","nextState","onHeightChange","map","tag","labelExtractor","length","tagColor","tagTextColor","tagContainerStyle","tagTextStyle","editable","styles","container","wrapper","height","tagInputContainerScroll","scrollViewProps","tagInputContainer","textInputContainer","textInput","color","inputColor","inputProps","PureComponent","propTypes","array","isRequired","func","string","bool","style","Text","number","shape","TextInput","ScrollView","defaultProps","Tag","curPos","onPress","x","isLastTag","tagLabel","isValidElement","label","tagText","backgroundColor","oneOfType","element","StyleSheet","create","flex","flexDirection","marginTop","marginBottom","alignItems","flexWrap","fontSize","padding","justifyContent","marginRight","borderRadius"],"mappings":"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","sourcesContent":["// @flow\n\nimport type {\n  StyleObj,\n} from 'react-native/Libraries/StyleSheet/StyleSheetTypes';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  TouchableOpacity,\n  Dimensions,\n  TouchableWithoutFeedback,\n  ScrollView,\n  ViewPropTypes,\n  Platform,\n} from 'react-native';\nimport invariant from 'invariant';\n\nconst windowWidth = Dimensions.get('window').width;\n\ntype KeyboardShouldPersistTapsProps =\n  \"always\" | \"never\" | \"handled\" | false | true;\ntype RequiredProps<T> = {\n  /**\n   * An array of tags, which can be any type, as long as labelExtractor below\n   * can extract a string from it\n   */\n  value: $ReadOnlyArray<T>,\n  /**\n   * A handler to be called when array of tags change. The parent should update\n   * the value prop when this is called if they want to enable removal of tags\n   */\n  onChange: (items: $ReadOnlyArray<T>) => void,\n  /**\n   * Function to extract string value for label from item\n   */\n  labelExtractor: (tagData: T) => string | React.Element<any>,\n  /**\n   * The text currently being displayed in the TextInput following the list of\n   * tags\n   */\n  text: string,\n  /**\n   * This callback gets called when the user types in the TextInput. The parent\n   * should update the text prop when this is called if they want to enable\n   * input. This is also where any parsing to detect new tags should occur\n   */\n  onChangeText: (text: string) => void,\n};\ntype OptionalProps = {\n  /**\n   * If false, text input is not editable and existing tags cannot be removed.\n   */\n  editable: boolean,\n  /**\n   * Background color of tags\n   */\n  tagColor: string,\n  /**\n   * Text color of tags\n   */\n  tagTextColor: string,\n  /**\n   * Styling override for container surrounding tag text\n   */\n  tagContainerStyle?: StyleObj,\n  /**\n   * Styling override for tag's text component\n   */\n  tagTextStyle?: StyleObj,\n  /**\n   * Width override for text input's default width when it's empty and showing placeholder\n   */\n  inputDefaultWidth: number,\n  /**\n   * Color of text input\n   */\n  inputColor: string,\n  /**\n   * Any misc. TextInput props (autoFocus, placeholder, returnKeyType, etc.)\n   */\n  inputProps?: $PropertyType<TextInput, 'props'>,\n  /**\n   * Max height of the tag input on screen (will scroll if max height reached)\n   */\n  maxHeight: number,\n  /**\n   * Callback that gets passed the new component height when it changes\n   */\n  onHeightChange?: (height: number) => void,\n  /**\n   * Any ScrollView props (horizontal, showsHorizontalScrollIndicator, etc.)\n  */\n  scrollViewProps?: $PropertyType<ScrollView, 'props'>,\n};\ntype Props<T> = RequiredProps<T> & OptionalProps;\ntype State = {\n  inputWidth: number,\n  wrapperHeight: number,\n};\n\nclass TagInput<T> extends React.PureComponent<Props<T>, State> {\n\n  static propTypes = {\n    value: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n    labelExtractor: PropTypes.func.isRequired,\n    text: PropTypes.string.isRequired,\n    onChangeText: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n    tagColor: PropTypes.string,\n    tagTextColor: PropTypes.string,\n    tagContainerStyle: ViewPropTypes.style,\n    tagTextStyle: Text.propTypes.style,\n    inputDefaultWidth: PropTypes.number,\n    inputColor: PropTypes.string,\n    inputProps: PropTypes.shape(TextInput.propTypes),\n    maxHeight: PropTypes.number,\n    onHeightChange: PropTypes.func,\n    scrollViewProps: PropTypes.shape(ScrollView.propTypes),\n  };\n  props: Props<T>;\n  state: State;\n  wrapperWidth = windowWidth;\n  spaceLeft = 0;\n  // scroll to bottom\n  contentHeight = 0;\n  // refs\n  tagInput: ?TextInput = null;\n  scrollView: ?ScrollView = null;\n\n  static defaultProps = {\n    editable: true,\n    tagColor: '#dddddd',\n    tagTextColor: '#777777',\n    inputDefaultWidth: 90,\n    inputColor: '#777777',\n    maxHeight: 75,\n  };\n\n  static inputWidth(\n    text: string,\n    spaceLeft: number,\n    inputDefaultWidth: number,\n    wrapperWidth: number\n  ) {\n    if (text === \"\") {\n      return inputDefaultWidth;\n    } else if (spaceLeft >= 100) {\n      return spaceLeft - 10;\n    } else {\n      return wrapperWidth;\n    }\n  }\n\n  constructor(props: Props<T>) {\n    super(props);\n    this.state = {\n      inputWidth: props.inputDefaultWidth,\n      wrapperHeight: 36,\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props<T>) {\n    const inputWidth = TagInput.inputWidth(\n      nextProps.text,\n      this.spaceLeft,\n      nextProps.inputDefaultWidth,\n      this.wrapperWidth,\n    );\n    if (inputWidth !== this.state.inputWidth) {\n      this.setState({ inputWidth });\n    }\n    const wrapperHeight = Math.min(\n      nextProps.maxHeight,\n      this.contentHeight,\n    );\n    if (wrapperHeight !== this.state.wrapperHeight) {\n      this.setState({ wrapperHeight });\n    }\n  }\n\n  componentWillUpdate(nextProps: Props<T>, nextState: State) {\n    if (\n      this.props.onHeightChange &&\n      nextState.wrapperHeight !== this.state.wrapperHeight\n    ) {\n      this.props.onHeightChange(nextState.wrapperHeight);\n    }\n  }\n\n  measureWrapper = (event: { nativeEvent: { layout: { width: number } } }) => {\n    this.wrapperWidth = event.nativeEvent.layout.width;\n    const inputWidth = TagInput.inputWidth(\n      this.props.text,\n      this.spaceLeft,\n      this.props.inputDefaultWidth,\n      this.wrapperWidth,\n    );\n    if (inputWidth !== this.state.inputWidth) {\n      this.setState({ inputWidth });\n    }\n  }\n\n  onBlur = (event: { nativeEvent: { text: string } }) => {\n    invariant(Platform.OS === \"ios\", \"only iOS gets text on TextInput.onBlur\");\n    this.props.onChangeText(event.nativeEvent.text);\n  }\n\n  onKeyPress = (event: { nativeEvent: { key: string } }) => {\n    if (this.props.text !== '' || event.nativeEvent.key !== 'Backspace') {\n      return;\n    }\n    const tags = [...this.props.value];\n    tags.pop();\n    this.props.onChange(tags);\n    this.scrollToEnd();\n    this.focus();\n  }\n\n  focus = () => {\n    invariant(this.tagInput, \"should be set\");\n    this.tagInput.focus();\n  }\n\n  removeIndex = (index: number) => {\n    const tags = [...this.props.value];\n    tags.splice(index, 1);\n    this.props.onChange(tags);\n  }\n\n  scrollToEnd = () => {\n    const scrollView = this.scrollView;\n    invariant(\n      scrollView,\n      \"this.scrollView ref should exist before scrollToEnd called\",\n    );\n    setTimeout(() => {\n      scrollView.scrollToEnd({ animated: true });\n    }, 0);\n  }\n\n  render() {\n    const tags = this.props.value.map((tag, index) => (\n      <Tag\n        index={index}\n        label={this.props.labelExtractor(tag)}\n        isLastTag={this.props.value.length === index + 1}\n        onLayoutLastTag={this.onLayoutLastTag}\n        removeIndex={this.removeIndex}\n        tagColor={this.props.tagColor}\n        tagTextColor={this.props.tagTextColor}\n        tagContainerStyle={this.props.tagContainerStyle}\n        tagTextStyle={this.props.tagTextStyle}\n        key={index}\n        editable={this.props.editable}\n      />\n    ));\n\n    return (\n      <TouchableWithoutFeedback\n        onPress={this.focus}\n        style={styles.container}\n        onLayout={this.measureWrapper}\n      >\n        <View style={[styles.wrapper, { height: this.state.wrapperHeight }]}>\n          <ScrollView\n            ref={this.scrollViewRef}\n            style={styles.tagInputContainerScroll}\n            onContentSizeChange={this.onScrollViewContentSizeChange}\n            keyboardShouldPersistTaps={\n              (\"handled\": KeyboardShouldPersistTapsProps)\n            }\n            {...this.props.scrollViewProps}\n          >\n            <View style={styles.tagInputContainer}>\n              {tags}\n              <View style={[\n                styles.textInputContainer,\n                { width: this.state.inputWidth },\n              ]}>\n                <TextInput\n                  ref={this.tagInputRef}\n                  blurOnSubmit={false}\n                  onKeyPress={this.onKeyPress}\n                  value={this.props.text}\n                  style={[styles.textInput, {\n                    width: this.state.inputWidth,\n                    color: this.props.inputColor,\n                  }]}\n                  onBlur={Platform.OS === \"ios\" ? this.onBlur : undefined}\n                  onChangeText={this.props.onChangeText}\n                  autoCapitalize=\"none\"\n                  autoCorrect={false}\n                  placeholder=\"Start typing\"\n                  returnKeyType=\"done\"\n                  keyboardType=\"default\"\n                  editable={this.props.editable}\n                  underlineColorAndroid=\"rgba(0,0,0,0)\"\n                  {...this.props.inputProps}\n                />\n              </View>\n            </View>\n          </ScrollView>\n        </View>\n      </TouchableWithoutFeedback>\n    )\n  }\n\n  tagInputRef = (tagInput: ?React.ElementRef<typeof TextInput>) => {\n    invariant(typeof tagInput === \"object\", \"TextInput ref is object\");\n    this.tagInput = tagInput;\n  }\n\n  scrollViewRef = (scrollView: ?React.ElementRef<typeof ScrollView>) => {\n    invariant(typeof scrollView === \"object\", \"ScrollView ref is object\");\n    this.scrollView = scrollView;\n  }\n\n  onScrollViewContentSizeChange = (w: number, h: number) => {\n    if (this.contentHeight === h) {\n      return;\n    }\n    const nextWrapperHeight = Math.min(this.props.maxHeight, h);\n    if (nextWrapperHeight !== this.state.wrapperHeight) {\n      this.setState(\n        { wrapperHeight: nextWrapperHeight },\n        this.contentHeight < h ? this.scrollToEnd : undefined,\n      );\n    } else if (this.contentHeight < h) {\n      this.scrollToEnd();\n    }\n    this.contentHeight = h;\n  }\n\n  onLayoutLastTag = (endPosOfTag: number) => {\n    const margin = 3;\n    this.spaceLeft = this.wrapperWidth - endPosOfTag - margin - 10;\n    const inputWidth = TagInput.inputWidth(\n      this.props.text,\n      this.spaceLeft,\n      this.props.inputDefaultWidth,\n      this.wrapperWidth,\n    );\n    if (inputWidth !== this.state.inputWidth) {\n      this.setState({ inputWidth });\n    }\n  }\n\n}\n\ntype TagProps = {\n  index: number,\n  label: string | React.Element<any>,\n  isLastTag: boolean,\n  editable: boolean,\n  onLayoutLastTag: (endPosOfTag: number) => void,\n  removeIndex: (index: number) => void,\n  tagColor: string,\n  tagTextColor: string,\n  tagContainerStyle?: StyleObj,\n  tagTextStyle?: StyleObj,\n};\nclass Tag extends React.PureComponent<TagProps> {\n\n  props: TagProps;\n  static propTypes = {\n    index: PropTypes.number.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n    isLastTag: PropTypes.bool.isRequired,\n    editable: PropTypes.bool.isRequired,\n    onLayoutLastTag: PropTypes.func.isRequired,\n    removeIndex: PropTypes.func.isRequired,\n    tagColor: PropTypes.string.isRequired,\n    tagTextColor: PropTypes.string.isRequired,\n    tagContainerStyle: ViewPropTypes.style,\n    tagTextStyle: Text.propTypes.style,\n  };\n  curPos: ?number = null;\n\n  componentWillReceiveProps(nextProps: TagProps) {\n    if (\n      !this.props.isLastTag &&\n      nextProps.isLastTag &&\n      this.curPos !== null &&\n      this.curPos !== undefined\n    ) {\n      this.props.onLayoutLastTag(this.curPos);\n    }\n  }\n\n  render() {\n    let tagLabel;\n    if (React.isValidElement(this.props.label)) {\n      tagLabel = this.props.label;\n    } else {\n      tagLabel = (\n        <Text style={[\n            styles.tagText,\n            { color: this.props.tagTextColor },\n            this.props.tagTextStyle,\n          ]}>\n            {this.props.label}\n            &nbsp;&times;\n        </Text>\n      );\n    }\n    return (\n      <TouchableOpacity\n        disabled={!this.props.editable}\n        onPress={this.onPress}\n        onLayout={this.onLayoutLastTag}\n        style={[\n          styles.tag,\n          { backgroundColor: this.props.tagColor },\n          this.props.tagContainerStyle,\n        ]}\n      >\n        {tagLabel}\n      </TouchableOpacity>\n    );\n  }\n\n  onPress = () => {\n    this.props.removeIndex(this.props.index);\n  }\n\n  onLayoutLastTag = (\n    event: { nativeEvent: { layout: { x: number, width: number } } },\n  ) => {\n    const layout = event.nativeEvent.layout;\n    this.curPos = layout.width + layout.x;\n    if (this.props.isLastTag) {\n      this.props.onLayoutLastTag(this.curPos);\n    }\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  wrapper: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 3,\n    marginBottom: 2,\n    alignItems: 'flex-start',\n  },\n  tagInputContainerScroll: {\n    flex: 1,\n  },\n  tagInputContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  textInput: {\n    height: 36,\n    fontSize: 16,\n    flex: .6,\n    marginBottom: 6,\n    padding: 0,\n  },\n  textInputContainer: {\n    height: 36,\n  },\n  tag: {\n    justifyContent: 'center',\n    marginTop: 6,\n    marginRight: 3,\n    padding: 8,\n    height: 24,\n    borderRadius: 2,\n  },\n  tagText: {\n    padding: 0,\n    margin: 0,\n  },\n});\n\nexport default TagInput;\n"]},"metadata":{},"sourceType":"module"}